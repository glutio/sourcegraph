package shared

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"

	"github.com/pkg/errors"
)

func maybePostgresProcFile() (string, error) {
	// PG is already configured
	if os.Getenv("PGHOST") != "" || os.Getenv("PGDATASOURCE") != "" {
		return "", nil
	}

	// Postgres needs to be able to write to run
	var output bytes.Buffer
	e := execer{Out: &output}
	e.Command("mkdir", "-p", "/run/postgresql")
	e.Command("chown", "-R", "postgres", "/run/postgresql")
	if err := e.Error(); err != nil {
		log.Printf("Setting up postgres failed:\n%s", output.String())
		return "", err
	}

	// Version of Postgres we are running.
	newVersion := getenv("PG_VERSION", "11")

	// postgres wants its config in the data dir
	path := filepath.Join(os.Getenv("DATA_DIR"), "postgresql")
	if _, err := os.Stat(path); err != nil {
		if !os.IsNotExist(err) {
			return "", err
		}

		if verbose {
			log.Printf("Setting up PostgreSQL at %s", path)
		}
		log.Println("✱ Sourcegraph is initializing the internal database... (may take 15-20 seconds)")

		var output bytes.Buffer
		e := execer{Out: &output}
		e.Command("mkdir", "-p", path)
		e.Command("chown", "postgres", path)
		// initdb --nosync saves ~3-15s on macOS during initial startup. By the time actual data lives in the
		// DB, the OS should have had time to fsync.
		e.Command("su-exec", "postgres", "initdb", "-D", path, "--nosync")
		e.Command("su-exec", "postgres", "pg_ctl", "-D", path, "-o -c listen_addresses=127.0.0.1", "-l", "/tmp/pgsql.log", "-w", "start")
		e.Command("su-exec", "postgres", "createdb", "sourcegraph")
		e.Command("su-exec", "postgres", "pg_ctl", "-D", path, "-m", "fast", "-l", "/tmp/pgsql.log", "-w", "stop")
		if err := e.Error(); err != nil {
			log.Printf("Setting up postgres failed:\n%s", output.String())
			os.RemoveAll(path)
			return "", err
		}
	} else if bs, err := ioutil.ReadFile(filepath.Join(path, "PG_VERSION")); err != nil {
		return "", errors.Wrap(err, "Failed to detect version of existing internal database")
	} else if oldVersion := strings.TrimSpace(string(bs)); oldVersion != newVersion {
		log.Printf("✱ Sourcegraph is upgrading the internal database... This may take some time.")

		hostDataDir := os.Getenv("HOST_DATA_DIR")
		if hostDataDir == "" {
			log.Printf("HOST_DATA_DIR required for upgrading existing data. Example: docker run ... -e 'HOST_DATA_DIR=/home/joe/.sourcegraph' ...")
			return "", errors.New("Missing absolute HOST_DATA_DIR path")
		}

		hostPath := filepath.Join(hostDataDir, "data", filepath.Base(path))
		hostUpgradeDir := filepath.Join(hostDataDir, "data", fmt.Sprintf("pg-upgrade-%s-to-%s", oldVersion, newVersion))

		e := execer{Out: os.Stdout}
		e.Command("docker", "run",
			"-v", fmt.Sprintf("%s:/var/lib/postgresql", hostUpgradeDir),
			"-v", fmt.Sprintf("%s:/var/lib/postgresql/%s/data", hostPath, oldVersion),
			"-v", fmt.Sprintf("%s-%s:/var/lib/postgresql/%s/data", hostPath, newVersion, newVersion),
			fmt.Sprintf("tianon/postgres-upgrade:%s-to-%s", oldVersion, newVersion),
		)
		e.Command("mv", path, path+"-"+oldVersion)
		e.Command("mv", path+"-"+newVersion, path)

		if err := e.Error(); err != nil {
			log.Printf("postgres upgrade failed:\n%s", &output)
			return "", err
		}

		log.Printf("✱ Sourcegraph upgraded internal database. Some manual commands required: \n")

		// TODO: Find a way to get the *.sql and .sh files generated by pg_upgrade to the host
		// in order to either run postgres-optimize.sh automatically or let the user run it manually.
		// It'd be better for all of this to be automatic.

		return "", errors.New("Manual commands required to finish upgrade")

	}

	{
		// Between restarts the owner of the volume may have changed. Ensure
		// postgres can still read it.
		var output bytes.Buffer
		e := execer{Out: &output}
		e.Command("chown", "-R", "postgres", path)
		if err := e.Error(); err != nil {
			log.Printf("Adjusting fs owners for postgres failed:\n%s", output.String())
			return "", err
		}
	}

	// Set PGHOST to default to 127.0.0.1, NOT localhost, as localhost does not correctly resolve in some environments
	// (see https://github.com/sourcegraph/issues/issues/34 and https://github.com/sourcegraph/sourcegraph/issues/9129).
	SetDefaultEnv("PGHOST", "127.0.0.1")
	SetDefaultEnv("PGUSER", "postgres")
	SetDefaultEnv("PGDATABASE", "sourcegraph")
	SetDefaultEnv("PGSSLMODE", "disable")

	return "postgres: su-exec postgres sh -c 'postgres -c listen_addresses=127.0.0.1 -D " + path + "' 2>&1 | grep -v 'database system was shut down' | grep -v 'MultiXact member wraparound' | grep -v 'database system is ready' | grep -v 'autovacuum launcher started' | grep -v 'the database system is starting up'", nil
}

func getenv(name, def string) string {
	if v := strings.TrimSpace(os.Getenv(name)); v == "" {
		return def
	}
	return name
}
